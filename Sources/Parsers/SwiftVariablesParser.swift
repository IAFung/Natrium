//
//  NatriumConfigSwiftHelper.swift
//  CommandLineKit
//
//  Created by Bas van Kuijck on 20/10/2017.
//

import Foundation
import Yaml

class SwiftVariablesParser: Parser {

    let natrium: Natrium
    var isRequired: Bool {
        return true
    }

    var yamlKey: String {
        return "variables"
    }

    required init(natrium: Natrium) {
        self.natrium = natrium
    }

    private let preservedVariableNames = [ "environment", "configuration" ]

    private var template: String {
        return """
import Foundation

/// Natrium.Config
/// Autogenerated by natrium
///
/// - see: https://github.com/e-sites/Natrium
public class Config {
    public enum EnvironmentType: String {
{%environments%}
    }

    public enum ConfigurationType: String {
{%configurations%}
    }

    public static let environment: EnvironmentType = {%environment%}
    public static let configuration: ConfigurationType = {%configuration%}

{%customvariables%}
}
"""
    }

    func parse(_ yaml: [NatriumKey: Yaml]) {
        let environments = natrium.environments.map {
            "        case \($0.lowercased()) = \"\($0)\""
        }.joined(separator: "\n")

        let configurations = natrium.configurations.map {
            "        case \($0.lowercased()) = \"\($0)\""
        }.joined(separator: "\n")

        let customVariables = yaml.map { key, value in
            if preservedVariableNames.contains(key.string) {
                Logger.fatalError("\(key.string) is a reserved variable name")
            }
            let type: String
            var stringValue = value.stringValue
            switch value {
            case .int:
                type = "Int"
            case .double:
                type = "Double"
            case .bool:
                type = "Bool"
            case .null:
                type = "String?"
            default:
                type = "String"
                stringValue = "\"\(value.stringValue)\""
            }
            return "    public static let \(key.string): \(type) = \(stringValue)"
        }.joined(separator: "\n")

        var contents = template
        let ar: [(String, String)] = [
            ("environments", environments),
            ("environment", ".\(natrium.environment.lowercased())"),
            ("configurations", configurations),
            ("configuration", ".\(natrium.configuration.lowercased())"),
            ("customvariables", customVariables)
        ]

        for object in ar {
            contents = contents.replacingOccurrences(of: "{%\(object.0)%}", with: object.1)
        }

        let currentDirectory = FileManager.default.currentDirectoryPath
        let filePath = "\(currentDirectory)/Config.swift"
        FileHelper.write(filePath: filePath, contents: contents)
    }
}
